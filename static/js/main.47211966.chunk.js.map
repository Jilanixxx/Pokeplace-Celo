{"version":3,"sources":["utils/minter.js","components/Cover.js","components/ui/Notifications.js","utils/index.js","components/ui/Identicon.js","components/wallet/index.js","hooks/useMinterContract.js","hooks/useContract.js","components/minter/nfts/AddCard.js","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","assets/img/pokeplace.jpg","App.js","hooks/useBalance.js","reportWebVitals.js","index.js","utils/constants.js"],"names":["auth","Buffer","from","process","toString","client","ipfsHttpClient","host","port","protocol","apiPath","headers","authorization","createNft","minterContract","performActions","name","description","image","price","kit","defaultAccount","data","JSON","stringify","BigNumber","shiftedBy","ERC20_DECIMALS","add","added","url","path","methods","mintCard","send","transaction","console","log","uploadToIpfs","e","file","target","files","progress","prog","getNfts","getCards","call","_nfts","Promise","all","map","card","owner","tokenURI","index","tokenUri","fetchNftMeta","meta","tokenId","Number","onSale","nfts","ipfsUrl","axios","get","buyCard","value","error","sellCard","unlistCard","deleteCard","Cover","coverImg","connect","className","style","background","minHeight","maxWidth","src","alt","Button","onClick","catch","variant","defaultProps","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","truncateAddress","address","slice","length","formatBigNumber","num","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","Stack","direction","gap","Divider","as","useMinterContract","abi","contractAddress","useContractKit","getConnectedKit","useState","contract","setContract","getContract","useCallback","web3","eth","Contract","useContract","PokePlace","PokePlaceContractAddress","AddCard","save","setName","setImage","setDescription","setPrice","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","placeholder","imageUrl","alert","Footer","disabled","PokeCard","buyNft","sellNft","unlistNft","burnNft","newPrice","setNewPrice","Col","Card","Badge","bg","objectFit","Text","Loader","role","Cards","updateBalance","setNfts","loading","setLoading","getAssets","allNfts","addNft","toast","Row","xs","sm","lg","_nft","App","balance","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","Nav","CELO","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.47211966.chunk.js","sourcesContent":["import { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport axios from \"axios\";\nimport BigNumber from \"bignumber.js\";\nimport { ERC20_DECIMALS } from \"./constants\";\nconst auth =\n\t\"Basic \" +\n\tBuffer.from(\n\t\tprocess.env.REACT_APP_PROJECT_ID +\n\t\t\t\":\" +\n\t\t\tprocess.env.REACT_APP_PROJECT_SECRET\n\t).toString(\"base64\");\n\nconst client = ipfsHttpClient({\n\thost: \"ipfs.infura.io\",\n\tport: 5001,\n\tprotocol: \"https\",\n\tapiPath: \"/api/v0\",\n\theaders: {\n\t\tauthorization: auth,\n\t},\n});\n\n// mint an NFT\nexport const createNft = async (\n\tminterContract,\n\tperformActions,\n\t{ name, description, image, price }\n) => {\n\tawait performActions(async (kit) => {\n\t\tif (!name || !description || !image) return;\n\t\tconst { defaultAccount } = kit;\n\n\t\t// convert NFT metadata to JSON format\n\t\tconst data = JSON.stringify({\n\t\t\tname,\n\t\t\tdescription,\n\t\t\timage,\n\t\t});\n\t\ttry {\n\t\t\tprice = new BigNumber(price).shiftedBy(ERC20_DECIMALS).toString();\n\n\t\t\t// save NFT metadata to IPFS\n\t\t\tconst added = await client.add(data);\n\n\t\t\t// IPFS url for uploaded metadata\n\t\t\tconst url = `https://pokeplace.infura-ipfs.io/ipfs/${added.path}`;\n\n\t\t\t// mint the NFT and save the IPFS url to the blockchain\n\t\t\tlet transaction = await minterContract.methods\n\t\t\t\t.mintCard(url, price)\n\t\t\t\t.send({ from: defaultAccount });\n\n\t\t\treturn transaction;\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Error uploading file: \", error);\n\t\t}\n\t});\n};\n\n// function to upload a file to IPFS\nexport const uploadToIpfs = async (e) => {\n\tconst file = e.target.files[0];\n\tif (!file) return;\n\ttry {\n\t\tconst added = await client.add(file, {\n\t\t\tprogress: (prog) => console.log(`received: ${prog}`),\n\t\t});\n\t\treturn `https://pokeplace.infura-ipfs.io/ipfs/${added.path}`;\n\t} catch (error) {\n\t\tconsole.log(\"Error uploading file: \", error);\n\t}\n};\n\n// fetch all NFTs on the smart contract\nexport const getNfts = async (minterContract) => {\n\ttry {\n\t\tconst _nfts = await minterContract.methods.getCards().call();\n\t\tconst nfts = await Promise.all(\n\t\t\t_nfts.map(async (card) => {\n\t\t\t\t// prevents retrieval of data for deleted cards\n\t\t\t\tif (\n\t\t\t\t\tcard.owner === \"0x0000000000000000000000000000000000000000\"\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst tokenUri = await minterContract.methods\n\t\t\t\t\t.tokenURI(card.index)\n\t\t\t\t\t.call();\n\t\t\t\tconst meta = await fetchNftMeta(tokenUri);\n\t\t\t\treturn {\n\t\t\t\t\ttokenId: Number(card.index),\n\t\t\t\t\tprice: new BigNumber(card.price),\n\t\t\t\t\towner: card.owner,\n\t\t\t\t\tonSale: card.onSale,\n\t\t\t\t\tname: meta.data.name,\n\t\t\t\t\tdescription: meta.data.description,\n\t\t\t\t\timage: meta.data.image,\n\t\t\t\t};\n\t\t\t})\n\t\t);\n\t\treturn nfts;\n\t} catch (e) {\n\t\tconsole.log({ e });\n\t}\n};\n\n// get the metedata for an NFT from IPFS\nexport const fetchNftMeta = async (ipfsUrl) => {\n\ttry {\n\t\tif (!ipfsUrl) return null;\n\t\tconst meta = await axios.get(ipfsUrl);\n\t\treturn meta;\n\t} catch (e) {\n\t\tconsole.log({ e });\n\t}\n};\n\nexport const buyCard = async (minterContract, performActions, index, price) => {\n\ttry {\n\t\tawait performActions(async (kit) => {\n\t\t\tconst { defaultAccount } = kit;\n\t\t\tawait minterContract.methods\n\t\t\t\t.buyCard(index)\n\t\t\t\t.send({ from: defaultAccount, value: price });\n\t\t});\n\t} catch (error) {\n\t\tconsole.error({ error });\n\t}\n};\n\nexport const sellCard = async (\n\tminterContract,\n\tperformActions,\n\tindex,\n\tprice\n) => {\n\ttry {\n\t\tprice = new BigNumber(price).shiftedBy(ERC20_DECIMALS).toString();\n\t\tawait performActions(async (kit) => {\n\t\t\tconst { defaultAccount } = kit;\n\t\t\tawait minterContract.methods\n\t\t\t\t.sellCard(index, price)\n\t\t\t\t.send({ from: defaultAccount });\n\t\t});\n\t} catch (error) {\n\t\tconsole.error({ error });\n\t}\n};\n\nexport const unlistCard = async (minterContract, performActions, index) => {\n\ttry {\n\t\tawait performActions(async (kit) => {\n\t\t\tconst { defaultAccount } = kit;\n\t\t\tawait minterContract.methods\n\t\t\t\t.unlistCard(index)\n\t\t\t\t.send({ from: defaultAccount });\n\t\t});\n\t} catch (error) {\n\t\tconsole.error({ error });\n\t}\n};\n\nexport const deleteCard = async (minterContract, performActions, index) => {\n\ttry {\n\t\tawait performActions(async (kit) => {\n\t\t\tconst { defaultAccount } = kit;\n\t\t\tawait minterContract.methods\n\t\t\t\t.deleteCard(index)\n\t\t\t\t.send({ from: defaultAccount });\n\t\t});\n\t} catch (error) {\n\t\tconsole.error({ error });\n\t}\n};\n","import React from 'react';\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\n\nconst Cover = ({ name, coverImg, connect }) => {\n  if (name) {\n    return (\n      <div\n          className=\"d-flex justify-content-center flex-column text-center \"\n          style={{ background: \"#000\", minHeight: \"100vh\" }}\n        >\n          <div className=\"mt-auto text-light mb-5\">\n            <div\n              className=\" ratio ratio-1x1 mx-auto mb-2\"\n              style={{ maxWidth: \"320px\" }}\n            >\n              <img src={coverImg} alt=\"\" />\n            </div>\n            <h1>{name}</h1>\n            <p>Please connect your wallet to continue.</p>\n            <Button\n              onClick={() => connect().catch((e) => console.log(e))}\n              variant=\"outline-light\"\n              className=\"rounded-pill px-3 mt-3\"\n            >\n              Connect Wallet\n            </Button>\n          </div>\n\n          <p className=\"mt-auto text-secondary\">Powered by Celo</p>\n        </div>\n    );\n  }\n\n  return null;\n};\n\n\nCover.propTypes = {\n  // props passed into this component\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: '',\n};\n\nexport default Cover;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {ToastContainer} from 'react-toastify';\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: '',\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({address, size, ...rest}) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(Jazzicon(size, parseInt(address.slice(2, 10), 16)));\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest} >\n        <div ref={ref} style={{width:`${size}px`,height:`${size}px`}}  />\n    </div>\n  )\n}","import React from 'react';\nimport {Dropdown, Stack, Spinner} from 'react-bootstrap';\nimport {formatBigNumber, truncateAddress} from '../../utils';\nimport Identicon from '../ui/Identicon'\n\nconst Wallet = ({address, amount, symbol, destroy}) => {\n    if (address) {\n        return <>\n\n            <Dropdown>\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\n                                 className=\"d-flex align-items-center border rounded-pill py-1\">\n                    {amount ? (\n                        <>{formatBigNumber(amount)} <span className=\"ms-1\"> {symbol}</span></>\n                    ) : (<Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>)}\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\n                </Dropdown.Toggle>\n\n      <Dropdown.Menu className=\"shadow-lg border-0\" >\n        <Dropdown.Item href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}  target=\"_blank\">     \n            <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">{truncateAddress(address)}</span>\n            </Stack>\n        </Dropdown.Item>\n        <Dropdown.Divider/>\n          <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\n              destroy()\n          }}>\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\n              Disconnect\n          </Dropdown.Item>\n      </Dropdown.Menu>\n    </Dropdown>\n    \n    </>\n  }\n\n  return null;\n};\n\nexport default Wallet;","import {useContract} from './useContract';\nimport PokePlace from '../contracts/PokePlace.json';\nimport PokePlaceContractAddress from '../contracts/PokePlace-address.json';\n\n\n// export interface for NFT contract\nexport const useMinterContract = () => useContract(PokePlace.abi, PokePlaceContractAddress.PokePlace);","import { useState, useEffect, useCallback } from 'react';\nimport { useContractKit } from '@celo-tools/use-contractkit';\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n\n    // get a contract interface to interact with\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\";\n\nconst AddCard = ({ save }) => {\n\tconst [name, setName] = useState(\"\");\n\tconst [image, setImage] = useState(\"\");\n\tconst [description, setDescription] = useState(\"\");\n\tconst [price, setPrice] = useState(0);\n\tconst isFormFilled = () => name && image && description && price;\n\n\tconst [show, setShow] = useState(false);\n\n\tconst handleClose = () => setShow(false);\n\tconst handleShow = () => setShow(true);\n\n\treturn (\n\t\t<>\n\t\t\t<Button\n\t\t\t\tonClick={handleShow}\n\t\t\t\tvariant=\"dark\"\n\t\t\t\tclassName=\"rounded-pill px-0\"\n\t\t\t\tstyle={{ width: \"38px\" }}\n\t\t\t>\n\t\t\t\t<i className=\"bi bi-plus\"></i>\n\t\t\t</Button>\n\t\t\t<Modal show={show} onHide={handleClose} centered>\n\t\t\t\t<Modal.Header closeButton>\n\t\t\t\t\t<Modal.Title>New PokeCard</Modal.Title>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Form>\n\t\t\t\t\t<Modal.Body>\n\t\t\t\t\t\t<FloatingLabel\n\t\t\t\t\t\t\tcontrolId=\"inputName\"\n\t\t\t\t\t\t\tlabel=\"Pokemon name\"\n\t\t\t\t\t\t\tclassName=\"mb-3\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tsetName(e.target.value);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tplaceholder=\"Enter name of pokemon\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FloatingLabel>\n\t\t\t\t\t\t<FloatingLabel\n\t\t\t\t\t\t\tcontrolId=\"inputUrl\"\n\t\t\t\t\t\t\tlabel=\"Image URL\"\n\t\t\t\t\t\t\tclassName=\"mb-3\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\tplaceholder=\"Image URL\"\n\t\t\t\t\t\t\t\tonChange={async (e) => {\n                  const imageUrl = await uploadToIpfs(e)\n                  if (!imageUrl) {\n                      alert(\"failed to upload image\");\n                      return;\n                  }\n                  setImage(imageUrl);\n              }\n              }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FloatingLabel>\n\t\t\t\t\t\t<FloatingLabel\n\t\t\t\t\t\t\tcontrolId=\"inputDescription\"\n\t\t\t\t\t\t\tlabel=\"Description\"\n\t\t\t\t\t\t\tclassName=\"mb-3\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tas=\"textarea\"\n\t\t\t\t\t\t\t\tplaceholder=\"description\"\n\t\t\t\t\t\t\t\tstyle={{ height: \"80px\" }}\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tsetDescription(e.target.value);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FloatingLabel>\n\t\t\t\t\t\t<FloatingLabel\n\t\t\t\t\t\t\tcontrolId=\"inputPrice\"\n\t\t\t\t\t\t\tlabel=\"Price\"\n\t\t\t\t\t\t\tclassName=\"mb-3\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\tplaceholder=\"Price\"\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tsetPrice(e.target.value);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FloatingLabel>\n\t\t\t\t\t</Modal.Body>\n\t\t\t\t</Form>\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<Button variant=\"outline-secondary\" onClick={handleClose}>\n\t\t\t\t\t\tClose\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"dark\"\n\t\t\t\t\t\tdisabled={!isFormFilled()}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsave({\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\timage,\n\t\t\t\t\t\t\t\tdescription,\n\t\t\t\t\t\t\t\tprice,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\thandleClose();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tSave pokecard\n\t\t\t\t\t</Button>\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t</>\n\t);\n};\n\nAddCard.propTypes = {\n\tsave: PropTypes.func.isRequired,\n};\n\nexport default AddCard;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Badge, Stack, Button, Form } from \"react-bootstrap\";\nimport { formatBigNumber, truncateAddress } from \"../../../utils\";\nimport Identicon from \"../../ui/Identicon\";\n\nconst PokeCard = ({ card, buyNft, sellNft, unlistNft, burnNft, address }) => {\n\tconst { tokenId, price, name, description, onSale, image, owner } = card;\n\tconst [newPrice, setNewPrice] = useState(\"\");\n\n\tconst getAction = () => {\n\t\tif (address === owner) {\n\t\t\tif (!onSale) {\n\t\t\t\treturn (\n\t\t\t\t\t<Stack direction=\"vertical\" gap={2}>\n\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Enter price\"\n\t\t\t\t\t\t\tvalue={newPrice}\n\t\t\t\t\t\t\tonChange={(e) => setNewPrice(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button onClick={() => sellNft(tokenId, newPrice)} variant=\"outline-success\">\n\t\t\t\t\t\t\tSell\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button onClick={() => burnNft(tokenId)} variant=\"outline-danger\">\n\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Stack>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\t<Button onClick={() => unlistNft(tokenId)} variant=\"outline-warning\">\n\t\t\t\t\t\tUnlist\n\t\t\t\t\t</Button>\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (onSale) {\n\t\t\t\treturn (\n\t\t\t\t\t<Button onClick={() => buyNft(tokenId, price)} variant=\"outline-dark\">\n\t\t\t\t\t\tBuy for {formatBigNumber(price)} CELO\n\t\t\t\t\t</Button>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t}\n\t};\n\treturn (\n\t\t<Col>\n\t\t\t<Card className=\" h-100\">\n\t\t\t\t<Card.Header>\n\t\t\t\t\t<Stack direction=\"horizontal\" gap={2}>\n\t\t\t\t\t\t<Identicon address={owner} size={28} />\n\t\t\t\t\t\t<span className=\"font-monospace text-secondary\">\n\t\t\t\t\t\t\t{truncateAddress(owner)}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<Badge bg=\"secondary\" className=\"ms-auto\">\n\t\t\t\t\t\t\t{tokenId} ID\n\t\t\t\t\t\t</Badge>\n\t\t\t\t\t</Stack>\n\t\t\t\t</Card.Header>\n\t\t\t\t<div className=\" ratio ratio-4x3\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={image}\n\t\t\t\t\t\talt={name}\n\t\t\t\t\t\tstyle={{ objectFit: \"cover\" }}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<Card.Body className=\"d-flex  flex-column text-center\">\n\t\t\t\t\t<Card.Title>{name}</Card.Title>\n\t\t\t\t\t<Card.Text className=\"flex-grow-1 \">\n\t\t\t\t\t\t{description}\n\t\t\t\t\t</Card.Text>\n\t\t\t\t\t{getAction()}\n\t\t\t\t</Card.Body>\n\t\t\t</Card>\n\t\t</Col>\n\t);\n};\n\nPokeCard.propTypes = {\n\tcard: PropTypes.instanceOf(Object).isRequired,\n\tbuyNft: PropTypes.func.isRequired,\n};\n\nexport default PokeCard;\n","import React from 'react';\nimport { Spinner} from \"react-bootstrap\";\nconst Loader = () => (\n \n \n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n\n);\nexport default Loader;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport AddCard from \"./AddCard\";\nimport PokeCard from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n\tgetNfts,\n\tcreateNft,\n\tbuyCard,\n\tsellCard,\n\tunlistCard,\n\tdeleteCard,\n} from \"../../../utils/minter\";\nimport { Row } from \"react-bootstrap\";\n\nconst Cards = ({ minterContract, updateBalance, name }) => {\n\t/* performActions : used to run smart contract interactions in order\n\t *  address : fetch the address of the connected wallet\n\t */\n\tconst { performActions, address } = useContractKit();\n\tconst [nfts, setNfts] = useState([]);\n\tconst [loading, setLoading] = useState(false);\n\n\tconst getAssets = useCallback(async () => {\n\t\ttry {\n\t\t\tsetLoading(true);\n\n\t\t\t// fetch all nfts from the smart contract\n\t\t\tconst allNfts = await getNfts(minterContract);\n\t\t\tif (!allNfts) return;\n\t\t\tsetNfts(allNfts);\n\t\t} catch (error) {\n\t\t\tconsole.log({ error });\n\t\t} finally {\n\t\t\tsetLoading(false);\n\t\t}\n\t}, [minterContract]);\n\n\tconst addNft = async (data) => {\n\t\ttry {\n\t\t\tsetLoading(true);\n\t\t\t// create an nft functionality\n\t\t\tawait createNft(minterContract, performActions, data);\n\t\t\ttoast(<NotificationSuccess text=\"Pokecard added successfully.\" />);\n\t\t\tgetAssets();\n\t\t} catch (error) {\n\t\t\tconsole.log({ error });\n\t\t\ttoast(<NotificationError text=\"Failed to add Pokecard.\" />);\n\t\t} finally {\n\t\t\tsetLoading(false);\n\t\t}\n\t};\n\n\tconst buyNft = async (index, price) => {\n\t\ttry {\n\t\t\tsetLoading(true);\n\n\t\t\t// create an nft functionality\n\t\t\tawait buyCard(minterContract, performActions, index, price);\n\t\t\ttoast(<NotificationSuccess text=\"Pokecard bought successfully\" />);\n\t\t\tgetAssets();\n\t\t\tupdateBalance();\n\t\t} catch (error) {\n\t\t\tconsole.log({ error });\n\t\t\ttoast(<NotificationError text=\"Failed to purchase pokecard.\" />);\n\t\t} finally {\n\t\t\tsetLoading(false);\n\t\t}\n\t};\n\n\tconst sellNft = async (index, price) => {\n\t\ttry {\n\t\t\tsetLoading(true);\n\t\t\t// create an nft functionality\n\t\t\tawait sellCard(minterContract, performActions, index, price);\n\t\t\ttoast(<NotificationSuccess text=\"Buying card....\" />);\n\t\t\tgetAssets();\n\t\t} catch (error) {\n\t\t\tconsole.log({ error });\n\t\t\ttoast(<NotificationError text=\"Failed to buy card.\" />);\n\t\t} finally {\n\t\t\tsetLoading(false);\n\t\t}\n\t};\n\tconst unlistNft = async (index) => {\n\t\ttry {\n\t\t\tsetLoading(true);\n\n\t\t\t// create an nft functionality\n\t\t\tawait unlistCard(minterContract, performActions, index);\n\t\t\ttoast(<NotificationSuccess text=\"Pokecard unlisted successfully\" />);\n\t\t\tgetAssets();\n\t\t} catch (error) {\n\t\t\tconsole.log({ error });\n\t\t\ttoast(<NotificationError text=\"Failed to unlist pokecard.\" />);\n\t\t} finally {\n\t\t\tsetLoading(false);\n\t\t}\n\t};\n\n\tconst burnNft = async (index) => {\n\t\ttry {\n\t\t\tsetLoading(true);\n\n\t\t\t// create an nft functionality\n\t\t\tawait deleteCard(minterContract, performActions, index);\n\t\t\ttoast(<NotificationSuccess text=\"Pokecard removed successfully\" />);\n\t\t\tgetAssets();\n\t\t} catch (error) {\n\t\t\tconsole.log({ error });\n\t\t\ttoast(<NotificationError text=\"Failed to remove pokecard.\" />);\n\t\t} finally {\n\t\t\tsetLoading(false);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\ttry {\n\t\t\tif (address && minterContract) {\n\t\t\t\tgetAssets();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log({ error });\n\t\t}\n\t}, [minterContract, address, getAssets]);\n\tif (address) {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{!loading ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className=\"d-flex justify-content-between align-items-center mb-4\">\n\t\t\t\t\t\t\t<h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\n\t\t\t\t\t\t\t<AddCard save={addNft} address={address} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Row\n\t\t\t\t\t\t\txs={1}\n\t\t\t\t\t\t\tsm={2}\n\t\t\t\t\t\t\tlg={3}\n\t\t\t\t\t\t\tclassName=\"g-3  mb-5 g-xl-4 g-xxl-5\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{/* display all NFTs */}\n\t\t\t\t\t\t\t{nfts.map((_nft) => {\n\t\t\t\t\t\t\t\t// prevents empty cards(deleted cards) from breaking the app\n\t\t\t\t\t\t\t\tif(typeof _nft === \"undefined\"){\n\t\t\t\t\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<PokeCard\n\t\t\t\t\t\t\t\t\tkey={_nft.tokenId}\n\t\t\t\t\t\t\t\t\tcard={{\n\t\t\t\t\t\t\t\t\t\t..._nft,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\taddress={address}\n\t\t\t\t\t\t\t\t\tbuyNft={buyNft}\n\t\t\t\t\t\t\t\t\tsellNft={sellNft}\n\t\t\t\t\t\t\t\t\tburnNft={burnNft}\n\t\t\t\t\t\t\t\t\tunlistNft={unlistNft}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}})}\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<Loader />\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t}\n\treturn null;\n};\n\nexport default Cards;\n","export default __webpack_public_path__ + \"static/media/pokeplace.74427232.jpg\";","import React from \"react\";\nimport Cover from \"./components/Cover\";\nimport {Notification} from \"./components/ui/Notifications\";\nimport Wallet from \"./components/wallet\";\nimport {useBalance, useMinterContract} from \"./hooks\";\n\n\nimport Cards from \"./components/minter/nfts\";\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\n\nimport coverImg from \"./assets/img/pokeplace.jpg\";\nimport \"./App.css\";\n\n\nimport {Container, Nav} from \"react-bootstrap\";\n\nconst App = function AppWrapper() {\n    /*\n    address : fetch the connected wallet address\n    destroy: terminate connection to user wallet\n    connect : connect to the celo blockchain\n     */\n    const {address, destroy, connect} = useContractKit();\n\n    //  fetch user's celo balance using hook\n    const {balance, getBalance} = useBalance();\n\n    // initialize the NFT mint contract\n    const minterContract = useMinterContract();\n\n    return (\n        <>\n            <Notification/>\n\n            {address ? (\n                <Container fluid=\"md\">\n                    <Nav className=\"justify-content-end pt-3 pb-5\">\n                        <Nav.Item>\n\n                            {/*display user wallet*/}\n                            <Wallet\n                                address={address}\n                                amount={balance.CELO}\n                                symbol=\"CELO\"\n                                destroy={destroy}\n                            />\n                        </Nav.Item>\n                    </Nav>\n                    <main>\n\n                        {/*list NFTs*/}\n                        <Cards\n                            name=\"PokePlace\"\n                            updateBalance={getBalance}\n                            minterContract={minterContract}\n                        />\n                    </main>\n                </Container>\n            ) : (\n                //  if user wallet is not connected display cover page\n                <Cover name=\"PokePlace\" coverImg={coverImg} connect={connect}/>\n            )}\n        </>\n    );\n};\n\nexport default App;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useContractKit } from '@celo-tools/use-contractkit';\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n\n  const getBalance = useCallback(async () => {\n\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n    ContractKitProvider,\n    Alfajores,\n    NetworkNames,\n} from '@celo-tools/use-contractkit';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <ContractKitProvider\n            networks={[Alfajores]}\n            network={{\n                name: NetworkNames.Alfajores,\n                rpcUrl: 'https://alfajores-forno.celo-testnet.org',\n                graphQl: 'https://alfajores-blockscout.celo-testnet.org/graphiql',\n        explorer: 'https://alfajores-blockscout.celo-testnet.org',\n        chainId: 44787,\n      }}\n      dapp={{\n        name: 'Pokeplace.',\n        description: 'An NFT collection of pokemon cards.',\n        url: 'https://dacade.org',\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n"],"sourceRoot":""}